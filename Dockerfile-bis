# syntax=docker/dockerfile:1
ARG NODE_VERSION=20.9.0
ARG PNPM_VERSION=8.15.4

# Stage 01: base
FROM node:${NODE_VERSION}-alpine AS base

# add the missing shared libraries from alpine base image
RUN apk add --no-cache libc6-compat

# Create app folder
WORKDIR /app

# Set to dev environment
ENV NODE_ENV development

# Create non-root user for Docker
RUN addgroup --system --gid 1001 node
RUN adduser --system --uid 1001 node

# Install pnpm.
RUN npm install -g pnpm@${PNPM_VERSION}

# Install angular cli globally
# RUN npm install -g @angular/cli@latest

# Install nestjs cli globally
RUN npm install -g @nestjs/cli@latest

# Install nx globally
RUN npm install -g nx@latest

# Stage 02: dependencies
FROM base AS dependencies

WORKDIR /app

# Create non-root user for Docker
RUN addgroup --system --gid 1001 node
RUN adduser --system --uid 1001 node

# Copy source code into app folder
COPY --chown=node:node . .

RUN npm install --force nx@latest
# RUN pnpm install --force --no-frozen-lockfile
RUN pnpm install --force

# Set Docker as a non-root user
USER node

# Set NX_DAEMON environment variable to false to prevent nx from running in daemon mode
ENV NX_DAEMON=false

# Stage 03: dev
FROM dependencies AS de

WORKDIR /app

RUN pnpm run zenstack:generate && pnpm run prisma:generate && pnpm run prisma-migrate
# Build the application
RUN nx run backend:build

CMD [ "pnpm", "run", "start", "backend"]
